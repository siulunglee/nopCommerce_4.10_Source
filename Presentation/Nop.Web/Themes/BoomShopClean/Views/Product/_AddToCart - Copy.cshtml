@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders

@if (Model.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" id="" />
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    <div class="add-to-cart">
        @if (Model.CustomerEntersPrice)
        {
            <div class="customer-entered-price">
                <div class="price-input">
                    <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                    @*round price*@
                    <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="enter-price-input" />
                </div>
                <div class="price-range">
                    @Model.CustomerEnteredPriceRange
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
        {
            <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
        }
        @if (!Model.DisableBuyButton)
        {

    <div class="add-to-cart-panel">
        <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>

        @if (Model.AllowedQuantities.Count > 0)
        {
            <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="qty-dropdown" refs="EnteredQuantity"></select>
        }
        else
        {
            @*<div id="QTYInputBox"></div>*@
            @*<QtyButton />*@
            <div class="qtyContainer">
                <input id="plusQtyButton" type="button" class="qtyButton" style="padding: 4px 7px; font-size:18px" value=" + " />
                <input asp-for="EnteredQuantity" class="qty-input" type="text" ref="EnteredQuantity" />
                <input id="minusQtyButton" type="button" class="qtyButton" style="padding: 4px 7px; font-size:18px" value=" - " />
            </div>
            <script asp-location="Footer">
                        //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                        $(document).ready(function() {
                            $("#@Html.IdFor(model => model.EnteredQuantity)").on("keydown", function(event) {
                                if (event.keyCode == 13) {
                                    $("#add-to-cart-button-@Model.ProductId").trigger("click");
                                    return false;
                                }
                            });
                        });
            </script>
        }
        @{
            var addToCartText = "";
            if (Model.UpdatedShoppingCartItemId > 0 && Model.ReOrder == 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
            {
                addToCartText = T("ShoppingCart.AddToCart.Update").Text;
            }
            else if (Model.UpdatedShoppingCartItemId > 0 && Model.ReOrder == 1 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
            {
                addToCartText = T("ShoppingCart.AddToCart").Text;

                Model.UpdatedShoppingCartItemId = -1;
            }
            else
            {
                addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                if (Model.ProductId != 0)
                {
                    //addToCartText =  T("ShoppingCart.ViewProduct").Text;
                }

                // Customized Modification by Developer
                //if (Model.)
                //{
                //    addToCartText = T("Order Here").Text;
                //}


            }

            @*@Model.ReOrder 
            @Model.UpdatedShoppingCartItemId*@
            <input type="button" id="add-to-cart-button-@Model.ProductId" class="button-1 add-to-cart-button" value="@addToCartText" 
                   data-productid="@Model.ProductId" 
                   onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", 
                        new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})',
                        '#product-details-form'); return false;" 
            />
        }
    </div>
            if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
            {
                <div class="pre-order-availability-date">
                    <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                    @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })

            <!--All Required REACTJS Lib-->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js"></script>

            <div id="subTotal">SubTotal: $0</div>

            @*<script src="~/dist/qtyButton.js" asp-append-version="true"></script>
                <script src="~/dist/subTotal.js" asp-append-version="true"></script>*@
            @*<script src="~/dist/jquery_react.js" asp-append-version="true"></script>*@
            @*<script src="@Url.Content("~/dist/main.js")"></script>*@


            <script src="~/dist/js_qtyButton.js" asp-append-version="true"></script>


    </div>
}
